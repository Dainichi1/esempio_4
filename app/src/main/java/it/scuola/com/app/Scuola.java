/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.scuola.com.app;



import java.util.*;

public class Scuola {

        private final Map<String, List<Integer>> studentiVoti;

        public Scuola(Map<String, List<Integer>> studentiVotiIniziali) throws IllegalArgumentException{
            for (List<Integer> voti : studentiVotiIniziali.values()) {
                for (Integer voto : voti) {
                    if (voto < 0) {
                        throw new IllegalArgumentException("voto deve essere maggiore di 0");
                    }
                }
            }
            this.studentiVoti = studentiVotiIniziali;
        }

        public void aggiungiVoto(String studente, Integer voto) throws IllegalArgumentException{
            if (voto < 0) {
                throw new IllegalArgumentException("I voti devono essere maggiori di 0");
            }

            List<Integer> voti = studentiVoti.get(studente);
            //Si cerca nella mappa studentiVoti la lista dei voti associati allo
            // studente specificato.
            //Se lo studente esiste nella mappa, voti conterrà la lista dei voti esistenti;
            // altrimenti, sarà null.

            if (voti == null) {
                //Controlla se voti è null, il che significa che lo studente non è ancora
                // presente nella mappa.
                //Se è null, il blocco di codice all'interno delle parentesi graffe
                // verrà eseguito.

                voti = new ArrayList<>(); // Usa il diamond operator
                //Crea una nuova lista vuota di interi per conservare i voti dello studente.
                //Utilizza l'operatore diamante, quindi il compilatore inferisce il tipo
                // Integer per la lista.

                studentiVoti.put(studente, voti);
                //Aggiunge la nuova lista vuota alla mappa studentiVoti,
                // associandola al nome dello studente.
                //Questa parte del codice viene eseguita solo se lo studente non era
                // già presente nella mappa.
            }
            voti.add(voto);
            //Aggiunge il voto specificato alla lista voti.
            //Poiché voti ora fa riferimento alla lista all'interno della mappa
            // (sia che fosse già esistente o appena creata),
            // l'aggiunta del voto aggiorna la mappa.

        }

        public List<Integer> getVoti(String studente) {
            return studentiVoti.get(studente);
        }

        public Map<String, List<Integer>> getStudentiVoti() {
            return studentiVoti;
        }

        public static void main(String[] args) {

            Map<String, List<Integer>> studentiVotiIniziali = new HashMap<>();
            studentiVotiIniziali.put("Mario", new ArrayList<>(List.of(9,8)));
            //Questo codice crea una nuova lista di interi con i valori 9 e 8.
            //
            //List.of(9, 8) crea una lista immutabile (non modificabile) con gli elementi
            // 9 e 8. Questo è un metodo comodo introdotto in Java 9 per creare liste
            // con un numero fisso di elementi.
            //
            //new ArrayList<>(...) crea una nuova lista basata sulla lista fornita
            //come argomento. Questo è necessario perché la lista restituita da List.of
            // è immutabile, quindi non puoi aggiungere o rimuovere elementi da essa.
            // Creando una nuova ArrayList, ottieni una lista che puoi modificare.
            //In sintesi, new ArrayList<>(List.of(9,8)) crea una nuova lista di
            // interi che contiene i numeri 9 e 8, e che può essere modificata in
            // seguito (ad esempio, puoi aggiungere o rimuovere elementi).
            studentiVotiIniziali.put("Luigi", new ArrayList<>(List.of(7,8)));


            Scuola scuola = new Scuola(studentiVotiIniziali);

            scuola.aggiungiVoto("Mario", 9);
            scuola.aggiungiVoto("Luigi", 8);
            scuola.aggiungiVoto("Mario", 10);
            scuola.aggiungiVoto("Luigi", 7);

            System.out.println("Voti di Mario: " + scuola.getVoti("Mario"));
            System.out.println("Voti di Luigi: " + scuola.getVoti("Luigi"));
            System.out.println("Tutti gli studenti e i voti: " + scuola.getStudentiVoti());
        }
    }

/**
 Immagina di avere una scuola con nessuno studente e nessun voto.
 Ora, vuoi aggiungere un voto di 8 a uno studente chiamato "Mario".

 Chiamata al Metodo: Chiami aggiungiVoto("Mario", 8).

 Cerca la Lista di Voti: La mappa non contiene "Mario", quindi voti è null.

 Crea una Nuova Lista: Dato che voti è null, crei una nuova lista vuota e
 la aggiungi alla mappa con la chiave "Mario".

 Aggiungi il Voto: Aggiungi il voto 8 alla lista di voti di "Mario".

 Ora la mappa studentiVoti contiene:


 {
 "Mario" -> [8]
 }

 Se chiami di nuovo aggiungiVoto("Mario", 10), il voto 10 verrà aggiunto alla
 lista esistente di voti di "Mario", e la mappa sarà:


 {
 "Mario" -> [8, 10]
 }

 L'operatore diamante <> viene utilizzato per semplificare la creazione
 della nuova lista vuota, evitando di dover ripetere il tipo Integer che è
 già noto dal contesto.
 **/

